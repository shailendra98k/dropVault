name: Build and Deploy to ECS

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get Workdir
        run: |
          pwd
          ls

      - name: Create ENV file
        run: |
          cd server && touch .env
          echo DB="${{ secrets.DB}}" >> .env
          echo DB_USER="${{ secrets.DB_USER}}" >> .env
          echo DB_PASSWORD="${{ secrets.DB_PASSWORD}}" >> .env
          echo ZOHO_USER="${{ secrets.ZOHO_USER}}" >> .env
          echo ZOHO_USER_PASSWORD="${{ secrets.ZOHO_USER_PASSWORD}}" >> .env
          echo MONGO_CONN_URL="${{ secrets.MONGO_CONN_URL}}" >> .env
          echo MONGO_USER="${{ secrets.MONGO_USER}}" >> .env
          echo MONGO_USER_PASSWORD="${{ secrets.MONGO_USER_PASSWORD}}" >> .env
          
          cd ../file-server && touch .env
          echo DEFAULT_FILE_STORAGE="storages.backends.s3.S3Storage" >> .env
          echo DB="${{ secrets.DB}}" >> .env
          echo DB_USER="${{ secrets.DB_USER}}" >> .env
          echo DB_PASSWORD="${{ secrets.DB_PASSWORD}}" >> .env
          echo AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          
          cd ..

      - name: Build Docker Image
        run: |
          docker-compose build

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: shailendra98k
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image to Docker Hub
        run: |
          docker push shailendra98k/dropvault_nginx:latest
          docker push shailendra98k/dropvault_core:latest
          docker push shailendra98k/dropvault_file_server:latest
          docker push shailendra98k/dropvault_ui:latest
#
      - name: Configure AWS Credentials
        run: |
          mkdir ~/.aws
          touch ~/.aws/credentials
          echo "[default]" > ~/.aws/credentials
          echo "region"="ap-south-1" >> ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

      - name: Update ECS Task Definition
        run: |
          # Using AWS CLI to update the ECS task definition with the new image tag
          aws ecs register-task-definition --family dropvault_nginx  --container-definitions '[{"name":"dropvault_nginx_ctn","image":"shailendra98k/dropvault_nginx:latest", "memory":128, "portMappings":[{"hostPort": 80, "protocol": "tcp", "containerPort":80}] }]' --region ap-south-1
          aws ecs register-task-definition --family dropvault_ui  --container-definitions '[{"name":"dropvault_ui_ctn","image":"shailendra98k/dropvault_ui:latest", "memory":128, "portMappings":[{"hostPort": 3000, "protocol": "tcp", "containerPort":3000}] }]' --region ap-south-1
          aws ecs register-task-definition --family dropvault_core  --container-definitions '[{"name":"dropvault_core_ctn","image":"shailendra98k/dropvault_core:latest", "memory":128, "portMappings":[{"hostPort": 8000, "protocol": "tcp", "containerPort":8000}] }]' --region ap-south-1
          aws ecs register-task-definition --family dropvault_file_server  --container-definitions '[{"name":"dropvault_file_server_ctn","image":"shailendra98k/dropvault_file_server:latest", "memory":500, "portMappings":[{"hostPort": 8001, "protocol": "tcp", "containerPort":8001}] }]' --region ap-south-1

      - name: Stop ECS Task
        run: |
          aws ecs list-tasks --cluster "DropVault" | jq -r ".taskArns[]" | xargs -r -n1 aws ecs stop-task --no-cli-pager --cluster "DropVault" --task


      - name: Run ECS Task
        run: |
          # Using AWS CLI to run the ECS task using the updated task definition
          aws ecs run-task --cluster DropVault --task-definition dropvault_nginx
          aws ecs run-task --cluster DropVault --task-definition dropvault_ui
          aws ecs run-task --cluster DropVault --task-definition dropvault_core
          aws ecs run-task --cluster DropVault --task-definition dropvault_file_server